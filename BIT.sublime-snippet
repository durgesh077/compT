<snippet>
	<content><![CDATA[
struct BIT
{
  vector<int>BITree;
  int n;
  int operator[](int index) 
  { 
    int sum = 0; // Iniialize result 
  
    index = index+1; 
  
    // Traverse ancestors of BITree[index] 
    while (index>0) 
    { 
        // Add current element of BITree to sum 
        sum += BITree[index]; 
  
        // Move index to parent node in getSum View 
        index -= index & (-index); 
    } 
    return sum; 
}

void update(int index, int val) 
{ 
    index = index + 1; 
  
    while (index <= n) 
    { 
    BITree[index] += val; 
  
    index += index & (-index); 
    } 
} 

BIT(vector<int>&arr) 
{ 
  n=arr.size();
    BITree.assign(n+1,0);
    for (int i=0; i<n; i++) 
        update(i, arr[i]); 

}
int ub(int x)
{
  int l=0,r=n;
  int mid=l+r>>1;
  auto obj=*this;
  if(x>obj[n-1])
    return n;
  while(l<r)
  {
    if(obj[mid]<x)
      l=mid+1;
    else
      r=mid;

    mid=l+r>>1;
  }
  return mid;
}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>BIT</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
